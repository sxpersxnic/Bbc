{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenAPI definition",
    "version": "v0"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Generated server url"
    }
  ],
  "paths": {
    "/tickets": {
      "get": {
        "tags": [
          "ticket-controller"
        ],
        "summary": "Get all tickets",
        "operationId": "findAll",
        "responses": {
          "200": {
            "description": "Tickets found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TicketDTO"
                }
              }
            }
          }
        },
        "security": []
      },
      "post": {
        "tags": [
          "ticket-controller"
        ],
        "summary": "Create a ticket, you need to be event manager to do that",
        "operationId": "create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Ticket was created successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TicketDTO"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to create a ticket"
          },
          "409": {
            "description": "Ticket could not be created"
          }
        }
      }
    },
    "/events": {
      "get": {
        "tags": [
          "event-controller"
        ],
        "summary": "Get all events",
        "operationId": "findAll_2",
        "responses": {
          "200": {
            "description": "Events found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventDTO"
                }
              }
            }
          }
        },
        "security": []
      },
      "post": {
        "tags": [
          "event-controller"
        ],
        "summary": "Create an event, you need to be event manager to do that",
        "operationId": "create_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Event was created successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventDTO"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to create an event"
          },
          "409": {
            "description": "Event could not be created"
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "tags": [
          "auth-controller"
        ],
        "summary": "Create a new user",
        "operationId": "signUp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User was created successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SignUpResponseDTO"
                }
              }
            }
          },
          "409": {
            "description": "User could not be created, username already in use"
          }
        },
        "security": []
      }
    },
    "/auth/signin": {
      "post": {
        "tags": [
          "auth-controller"
        ],
        "summary": "Receive a token for BEARER authorization",
        "operationId": "signIn",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SignInResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "security": []
      }
    },
    "/tickets/{id}": {
      "get": {
        "tags": [
          "ticket-controller"
        ],
        "summary": "Get a single ticket by Id",
        "operationId": "findById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of ticket to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ticket found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TicketDTO"
                }
              }
            }
          },
          "404": {
            "description": "Ticket not found"
          }
        },
        "security": []
      },
      "delete": {
        "tags": [
          "ticket-controller"
        ],
        "summary": "Delete a ticket, you need to be event manager to do that",
        "operationId": "deleteById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of ticket to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ticket was deleted",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TicketDTO"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to delete that ticket"
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      },
      "patch": {
        "tags": [
          "ticket-controller"
        ],
        "summary": "Update a ticket, you need to be event manager to do that",
        "operationId": "update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of ticket to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ticket was edited successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TicketDTO"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to update that ticket"
          },
          "404": {
            "description": "Ticket not found"
          },
          "409": {
            "description": "Ticket could not be updated"
          }
        }
      }
    },
    "/tickets/buy": {
      "patch": {
        "tags": [
          "ticket-controller"
        ],
        "summary": "Buy tickets, you need to be signed in to do that",
        "operationId": "buy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TicketDTO"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Tickets where successfully bought",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TicketDTO"
                }
              }
            }
          },
          "404": {
            "description": "One or more tickets were not found"
          },
          "409": {
            "description": "Tickets could not be bought"
          }
        }
      }
    },
    "/persons/{id}": {
      "get": {
        "tags": [
          "person-controller"
        ],
        "summary": "Get a single person by Id",
        "operationId": "findById_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of person to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Person found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonResponseDTO"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to view that person"
          },
          "404": {
            "description": "Person not found"
          }
        }
      },
      "delete": {
        "tags": [
          "person-controller"
        ],
        "summary": "Delete a person",
        "operationId": "deleteById_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of person to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Person was deleted",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonResponseDTO"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to delete that person"
          },
          "404": {
            "description": "Person not found"
          }
        }
      },
      "patch": {
        "tags": [
          "person-controller"
        ],
        "summary": "Update a person",
        "operationId": "update_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of person to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Person was edited successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonResponseDTO"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to update that person"
          },
          "404": {
            "description": "Person not found"
          },
          "409": {
            "description": "Person could not be updated"
          }
        }
      }
    },
    "/events/{id}": {
      "get": {
        "tags": [
          "event-controller"
        ],
        "summary": "Get a single event by Id",
        "operationId": "findById_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of event to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventDTO"
                }
              }
            }
          },
          "404": {
            "description": "Event not found"
          }
        },
        "security": []
      },
      "delete": {
        "tags": [
          "event-controller"
        ],
        "summary": "Delete an event, you need to be event manager to do that",
        "operationId": "deleteById_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of event to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Event was deleted",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventDTO"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to delete that event"
          },
          "404": {
            "description": "Event not found"
          }
        }
      },
      "patch": {
        "tags": [
          "event-controller"
        ],
        "summary": "Update an event, you need to be event manager to do that",
        "operationId": "update_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of event to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Event was edited successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventDTO"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to update that event"
          },
          "404": {
            "description": "Event not found"
          },
          "409": {
            "description": "Event could not be updated"
          }
        }
      }
    },
    "/tickets/unsold": {
      "get": {
        "tags": [
          "ticket-controller"
        ],
        "summary": "Get all unsold tickets",
        "operationId": "findAllUnsold",
        "responses": {
          "200": {
            "description": "Tickets found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TicketDTO"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/persons": {
      "get": {
        "tags": [
          "person-controller"
        ],
        "summary": "Get all persons, you need to be admin to do that",
        "operationId": "findAll_1",
        "responses": {
          "200": {
            "description": "Persons found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonResponseDTO"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "TicketDTO": {
        "required": [
          "eventId",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "amount": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "eventId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EventDTO": {
        "required": [
          "date",
          "name",
          "ownerId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "description": {
            "type": "string"
          },
          "ownerId": {
            "type": "integer",
            "format": "int32"
          },
          "ticketIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "AuthRequestDTO": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "SignUpResponseDTO": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "SignInResponseDTO": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PersonRequestDTO": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "email": {
            "type": "string"
          },
          "eventIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "password": {
            "type": "string"
          }
        }
      },
      "PersonResponseDTO": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "email": {
            "type": "string"
          },
          "eventIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "Authorization": {
        "type": "http",
        "in": "header",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}